import React, { useState } from "react";
import {
  FaUser, FaBasketballBall, FaArrowUp, FaArrowDown, FaUserShield, FaHeart, FaMedal,
   FaExclamationTriangle, FaPlus, FaEdit, FaTrash, FaClipboardCheck, FaDownload, FaListUl, FaCrown,
    FaChartPie, FaArrowRight, FaFileExport, 
} from "react-icons/fa";

const brand = { gold: "#FFD700", green: "#1de682", dark: "#232a2e", accent: "#283E51" };

const POSITIONS = [
  { key: "PG", label: "Point Guard" },
  { key: "SG", label: "Shooting Guard" },
  { key: "SF", label: "Small Forward" },
  { key: "PF", label: "Power Forward" },
  { key: "C", label: "Center" }
];

const CONTRACT_PHASES = [
  "Prospect", "Rotation", "Starter", "Star", "Veteran", "Loan", "Out", "Expiring"
];

const DEFAULT_SQUADS = [
  {
    label: "Senior Team",
    year: 2024,
    players: [
      { name: "Luka D.", pos: "PG", age: 20, nationality: "CRO", contract: "Starter", minutes: 32, risk: "fit", value: 420000, injury: false, captain: true, succession: "Ready", bench: false },
      { name: "Nikola S.", pos: "SF", age: 19, nationality: "CRO", contract: "Rotation", minutes: 21, risk: "fit", value: 210000, injury: false, captain: false, succession: "Development", bench: false },
      { name: "Marco R.", pos: "C", age: 27, nationality: "ITA", contract: "Star", minutes: 35, risk: "overuse", value: 710000, injury: false, captain: false, succession: "Risk", bench: false },
      { name: "Ivan J.", pos: "SG", age: 22, nationality: "CRO", contract: "Expiring", minutes: 27, risk: "fit", value: 120000, injury: false, captain: false, succession: "Ready", bench: false },
      { name: "Alex P.", pos: "PF", age: 25, nationality: "USA", contract: "Veteran", minutes: 19, risk: "fit", value: 530000, injury: true, captain: false, succession: "Risk", bench: false },
      { name: "Goran M.", pos: "PG", age: 17, nationality: "CRO", contract: "Prospect", minutes: 8, risk: "development", value: 25000, injury: false, captain: false, succession: "Future", bench: true },
      { name: "Domagoj K.", pos: "PF", age: 19, nationality: "CRO", contract: "Loan", minutes: 0, risk: "fit", value: 0, injury: false, captain: false, succession: "Development", bench: true }
    ],
    staff: [
      { name: "Krešimir B.", role: "Head Coach" },
      { name: "Mario S.", role: "Assistant Coach" },
      { name: "Goran D.", role: "S&C" }
    ]
  },
  {
    label: "U19 Team",
    year: 2024,
    players: [
      { name: "Antonio Z.", pos: "SG", age: 17, nationality: "CRO", contract: "Prospect", minutes: 28, risk: "fit", value: 12000, injury: false, captain: false, succession: "Future", bench: false },
      { name: "Filip V.", pos: "C", age: 18, nationality: "CRO", contract: "Rotation", minutes: 25, risk: "overuse", value: 21000, injury: false, captain: false, succession: "Development", bench: false },
      { name: "Jakov L.", pos: "PF", age: 18, nationality: "CRO", contract: "Rotation", minutes: 18, risk: "fit", value: 21000, injury: true, captain: false, succession: "Risk", bench: false },
      { name: "Luka S.", pos: "PG", age: 17, nationality: "CRO", contract: "Starter", minutes: 31, risk: "fit", value: 16000, injury: false, captain: true, succession: "Ready", bench: false }
    ],
    staff: [
      { name: "Hrvoje P.", role: "Head Coach" },
      { name: "Tomo C.", role: "S&C" }
    ]
  }
];

const VULN_COLORS = { "fit": "#1de682", "overuse": "#FFD700", "injury": "#ff4848", "development": "#FFD700", "Risk": "#ff4848", "Ready": "#1de682", "Future": "#FFD700" };

function calculateVulnerability(players) {
  // Per position: if <2 fit, or >1 risk/expiring/injury/overuse, flag red/yellow
  let counts = {};
  POSITIONS.forEach(p => counts[p.key] = { total: 0, risk: 0, fit: 0, dev: 0 });
  players.forEach(pl => {
    if (!counts[pl.pos]) return;
    counts[pl.pos].total += 1;
    if (pl.injury || pl.risk === "injury" || pl.contract === "Expiring" || pl.succession === "Risk") counts[pl.pos].risk += 1;
    else if (pl.succession === "Development" || pl.risk === "development") counts[pl.pos].dev += 1;
    else counts[pl.pos].fit += 1;
  });
  let radar = POSITIONS.map(p => ({
    pos: p.key,
    total: counts[p.key].total,
    risk: counts[p.key].risk,
    fit: counts[p.key].fit,
    dev: counts[p.key].dev,
    flag: counts[p.key].risk > 0 || counts[p.key].total < 2 ? "risk" : counts[p.key].fit < 2 ? "warn" : "ok"
  }));
  return radar;
}

function averageAge(players) {
  const ages = players.map(p => p.age);
  return ages.length ? Math.round(ages.reduce((a, b) => a + b, 0) / ages.length) : 0;
}

function nationalitySpread(players) {
  let map = {};
  players.forEach(p => map[p.nationality] = (map[p.nationality] || 0) + 1);
  return Object.entries(map).map(([n, cnt]) => `${n} (${cnt})`).join(", ");
}

const SquadVulnerabilityRadarElite = () => {
  const [squads, setSquads] = useState(DEFAULT_SQUADS);
  const [squadIdx, setSquadIdx] = useState(0);
  const [editIdx, setEditIdx] = useState(-1);
  const [editPlayer, setEditPlayer] = useState({});
  const [addMode, setAddMode] = useState(false);
  const [newPlayer, setNewPlayer] = useState({ name: "", pos: "PG", age: 17, nationality: "CRO", contract: "Prospect", minutes: 0, risk: "fit", value: 0, injury: false, captain: false, succession: "Future", bench: false });
  const [scenarioPos, setScenarioPos] = useState("");
  const [scenarioAlert, setScenarioAlert] = useState("");

  const squad = squads[squadIdx];
  const vuln = calculateVulnerability(squad.players);

  // CRUD
  const addPlayer = () => {
    let newSquads = squads.slice();
    newSquads[squadIdx].players.push({ ...newPlayer });
    setSquads(newSquads);
    setAddMode(false);
    setNewPlayer({ name: "", pos: "PG", age: 17, nationality: "CRO", contract: "Prospect", minutes: 0, risk: "fit", value: 0, injury: false, captain: false, succession: "Future", bench: false });
  };
  const editPlayerStart = idx => { setEditIdx(idx); setEditPlayer({ ...squad.players[idx] }); };
  const editPlayerSave = () => {
    let newSquads = squads.slice();
    newSquads[squadIdx].players[editIdx] = { ...editPlayer };
    setSquads(newSquads);
    setEditIdx(-1); setEditPlayer({});
  };
  const removePlayer = idx => {
    let newSquads = squads.slice();
    newSquads[squadIdx].players = newSquads[squadIdx].players.filter((_, i) => i !== idx);
    setSquads(newSquads);
  };
  // Cancel editing (add this!)
  const cancelEdit = () => {
    setEditIdx(-1);
    setEditPlayer({});
  };

  // Scenario
  const runScenario = () => {
    if (!scenarioPos) return;
    let group = squad.players.filter(p => p.pos === scenarioPos && (!p.injury && p.risk !== "injury"));
    if (!group.length) setScenarioAlert(`ALERT: No fit player for ${scenarioPos}. Immediate succession/loan/youth call-up needed.`);
    else if (group.length === 1) setScenarioAlert(`WARNING: Only one fit ${scenarioPos}. At risk for fixture congestion or injury.`);
    else setScenarioAlert(`OK: ${group.length} fit players available at ${scenarioPos}.`);
  };

  // Export
  const exportCSV = () => {
    let csv = ["Name,Pos,Age,Nationality,Contract,Minutes,Risk,Succession,Injury,Captain,Bench,Value"];
    squad.players.forEach(p =>
      csv.push([p.name, p.pos, p.age, p.nationality, p.contract, p.minutes, p.risk, p.succession, p.injury ? "Yes" : "No", p.captain ? "Yes" : "No", p.bench ? "Yes" : "No", p.value].join(","))
    );
    const blob = new Blob([csv.join("\n")], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = "squad.csv";
    a.click(); URL.revokeObjectURL(url);
  };

  return (
    <div style={{ background: brand.dark, color: "#fff", fontFamily: "Segoe UI, sans-serif", borderRadius: 22, padding: 28, boxShadow: "0 8px 48px #232a2e44", maxWidth: 1350, margin: "0 auto" }}>
      {/* Header */}
      <div style={{ display: "flex", alignItems: "center", gap: 18, marginBottom: 10 }}>
        <FaBasketballBall size={32} color={brand.gold} />
        <h2 style={{ fontWeight: 900, fontSize: 28, color: brand.gold, letterSpacing: 2, margin: 0 }}>Squad Builder & Vulnerability Radar</h2>
        <span style={{ background: brand.gold, color: "#232a2e", fontWeight: 700, borderRadius: 8, padding: '3px 18px', fontSize: 15, marginLeft: 22, boxShadow: '0 2px 10px #FFD70022' }}>
          CourtEvo Vero | Elite Consulting
        </span>
        <select value={squadIdx} onChange={e => setSquadIdx(Number(e.target.value))} style={{ ...btnStyle, marginLeft: 18 }}>
          {squads.map((sq, i) => <option key={i} value={i}>{sq.label} ({sq.year})</option>)}
        </select>
        <button onClick={exportCSV} style={{ ...btnStyle, background: "#1de682", color: "#232a2e" }}><FaFileExport style={{ marginRight: 5 }} /> Export CSV</button>
      </div>
      {/* Radar Heatmap */}
      <div style={{ display: "flex", gap: 44, marginTop: 14 }}>
        <div style={{ flex: 2 }}>
          <div style={{ display: "flex", gap: 10 }}>
            <div style={{ flex: 1 }}>
              <div style={{ fontWeight: 700, color: "#FFD700", fontSize: 18, marginBottom: 2 }}>Squad Overview</div>
              <div style={{ color: "#FFD700aa", marginBottom: 7 }}>
                Avg Age: <b style={{ color: "#1de682" }}>{averageAge(squad.players)}</b>
                &nbsp; | &nbsp;
                Nationality: <b style={{ color: "#1de682" }}>{nationalitySpread(squad.players)}</b>
                &nbsp; | &nbsp;
                Squad Value: <b style={{ color: "#1de682" }}>{squad.players.reduce((a, p) => a + (p.value || 0), 0)}€</b>
              </div>
              {/* Vulnerability Heatmap */}
              <table style={{ width: "100%", borderCollapse: "collapse", fontSize: 16, color: "#fff" }}>
                <thead>
                  <tr>
                    <th>Position</th>
                    <th>Total</th>
                    <th>Fit</th>
                    <th>Risk</th>
                    <th>Development</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody>
                  {vuln.map((v, i) =>
                    <tr key={v.pos} style={{ borderBottom: "1px solid #FFD70022", background: v.flag === "risk" ? "#ff484822" : v.flag === "warn" ? "#FFD70022" : "#1de68222" }}>
                      <td style={{ fontWeight: 700, color: "#FFD700" }}>{v.pos}</td>
                      <td>{v.total}</td>
                      <td style={{ color: "#1de682", fontWeight: 700 }}>{v.fit}</td>
                      <td style={{ color: "#ff4848", fontWeight: 700 }}>{v.risk}</td>
                      <td style={{ color: "#FFD700", fontWeight: 700 }}>{v.dev}</td>
                      <td style={{ color: v.flag === "risk" ? "#ff4848" : v.flag === "warn" ? "#FFD700" : "#1de682", fontWeight: 700 }}>
                        {v.flag === "risk" ? "RISK" : v.flag === "warn" ? "WARN" : "OK"}
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
            {/* Scenario/Next Man Up */}
            <div style={{ flex: 1, marginLeft: 13, background: "#283E51", borderRadius: 14, padding: 14 }}>
              <div style={{ fontWeight: 700, color: "#FFD700", marginBottom: 7 }}>Vulnerability Scenario Engine</div>
              <div>
                <select value={scenarioPos} onChange={e => setScenarioPos(e.target.value)} style={inputStyle}>
                  <option value="">Select Position</option>
                  {POSITIONS.map(p => <option key={p.key} value={p.key}>{p.label}</option>)}
                </select>
                <button onClick={runScenario} style={{ ...btnStyle, background: "#FFD700", color: "#232a2e", marginLeft: 7 }}><FaArrowRight /> Run</button>
              </div>
              {scenarioAlert && <div style={{ marginTop: 9, fontWeight: 700, color: scenarioAlert.startsWith("ALERT") ? "#ff4848" : scenarioAlert.startsWith("WARNING") ? "#FFD700" : "#1de682" }}>{scenarioAlert}</div>}
              {/* Next Man Up */}
              {scenarioPos &&
                <div style={{ marginTop: 12 }}>
                  <div style={{ fontWeight: 700, color: "#FFD700" }}>Next Man Up:</div>
                  {squad.players.filter(p => p.pos === scenarioPos && p.bench && !p.injury).length
                    ? squad.players.filter(p => p.pos === scenarioPos && p.bench && !p.injury).map(p =>
                      <div key={p.name} style={{ color: "#1de682", fontWeight: 700 }}>{p.name} ({p.age} yrs)</div>
                    )
                    : <div style={{ color: "#ff4848" }}>No bench/academy for this position.</div>
                  }
                </div>
              }
            </div>
          </div>
          {/* Players Table */}
          <div style={{ marginTop: 21, marginBottom: 8 }}>
            <div style={{ display: "flex", alignItems: "center" }}>
              <div style={{ fontWeight: 700, color: "#FFD700", fontSize: 17 }}>Squad Players</div>
              <button onClick={() => setAddMode(a => !a)} style={{ ...btnStyle, marginLeft: 14, background: "#FFD700", color: "#232a2e" }}>
                <FaPlus /> {addMode ? "Cancel" : "Add Player"}
              </button>
            </div>
            {addMode &&
              <div style={{ display: "flex", gap: 8, alignItems: "center", margin: "10px 0" }}>
                <input value={newPlayer.name} placeholder="Name" onChange={e => setNewPlayer({ ...newPlayer, name: e.target.value })} style={inputStyle} />
                <select value={newPlayer.pos} onChange={e => setNewPlayer({ ...newPlayer, pos: e.target.value })} style={inputStyle}>
                  {POSITIONS.map(p => <option key={p.key} value={p.key}>{p.label}</option>)}
                </select>
                <input type="number" value={newPlayer.age} min={15} max={45} placeholder="Age" onChange={e => setNewPlayer({ ...newPlayer, age: Number(e.target.value) })} style={inputStyle} />
                <input value={newPlayer.nationality} placeholder="Nationality" onChange={e => setNewPlayer({ ...newPlayer, nationality: e.target.value })} style={inputStyle} />
                <select value={newPlayer.contract} onChange={e => setNewPlayer({ ...newPlayer, contract: e.target.value })} style={inputStyle}>
                  {CONTRACT_PHASES.map(c => <option key={c} value={c}>{c}</option>)}
                </select>
                <input type="number" value={newPlayer.minutes} min={0} max={48} placeholder="Min" onChange={e => setNewPlayer({ ...newPlayer, minutes: Number(e.target.value) })} style={inputStyle} />
                <select value={newPlayer.risk} onChange={e => setNewPlayer({ ...newPlayer, risk: e.target.value })} style={inputStyle}>
                  <option value="fit">Fit</option>
                  <option value="overuse">Overuse</option>
                  <option value="injury">Injury</option>
                  <option value="development">Development</option>
                </select>
                <input type="number" value={newPlayer.value} min={0} step={5000} placeholder="Value" onChange={e => setNewPlayer({ ...newPlayer, value: Number(e.target.value) })} style={inputStyle} />
                <label style={{ color: "#FFD700", fontWeight: 700 }}>
                  <input type="checkbox" checked={newPlayer.injury} onChange={e => setNewPlayer({ ...newPlayer, injury: e.target.checked })} />Inj.
                </label>
                <label style={{ color: "#FFD700", fontWeight: 700 }}>
                  <input type="checkbox" checked={newPlayer.captain} onChange={e => setNewPlayer({ ...newPlayer, captain: e.target.checked })} />C
                </label>
                <select value={newPlayer.succession} onChange={e => setNewPlayer({ ...newPlayer, succession: e.target.value })} style={inputStyle}>
                  <option value="Ready">Ready</option>
                  <option value="Risk">Risk</option>
                  <option value="Development">Development</option>
                  <option value="Future">Future</option>
                </select>
                <label style={{ color: "#FFD700", fontWeight: 700 }}>
                  <input type="checkbox" checked={newPlayer.bench} onChange={e => setNewPlayer({ ...newPlayer, bench: e.target.checked })} />Bench
                </label>
                <button onClick={addPlayer} style={{ ...btnStyle, background: "#1de682", color: "#232a2e" }}><FaPlus /> Add</button>
              </div>
            }
            <table style={{ width: "100%", borderCollapse: "collapse", fontSize: 15, color: "#fff" }}>
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Pos</th>
                  <th>Age</th>
                  <th>Nat.</th>
                  <th>Contract</th>
                  <th>Min</th>
                  <th>Succession</th>
                  <th>Risk</th>
                  <th>Injury</th>
                  <th>Captain</th>
                  <th>Bench</th>
                  <th>Value</th>
                  <th></th>
                </tr>
              </thead>
              <tbody>
                {squad.players.map((p, i) =>
                  editIdx === i ? (
                    <tr key={i} style={{ background: "#FFD70022" }}>
                      <td><input value={editPlayer.name} onChange={e => setEditPlayer({ ...editPlayer, name: e.target.value })} style={inputStyleMini} /></td>
                      <td>
                        <select value={editPlayer.pos} onChange={e => setEditPlayer({ ...editPlayer, pos: e.target.value })} style={inputStyleMini}>
                          {POSITIONS.map(p => <option key={p.key} value={p.key}>{p.label}</option>)}
                        </select>
                      </td>
                      <td><input type="number" value={editPlayer.age} min={15} max={45} onChange={e => setEditPlayer({ ...editPlayer, age: Number(e.target.value) })} style={inputStyleMini} /></td>
                      <td><input value={editPlayer.nationality} onChange={e => setEditPlayer({ ...editPlayer, nationality: e.target.value })} style={inputStyleMini} /></td>
                      <td>
                        <select value={editPlayer.contract} onChange={e => setEditPlayer({ ...editPlayer, contract: e.target.value })} style={inputStyleMini}>
                          {CONTRACT_PHASES.map(c => <option key={c} value={c}>{c}</option>)}
                        </select>
                      </td>
                      <td><input type="number" value={editPlayer.minutes} min={0} max={48} onChange={e => setEditPlayer({ ...editPlayer, minutes: Number(e.target.value) })} style={inputStyleMini} /></td>
                      <td>
                        <select value={editPlayer.succession} onChange={e => setEditPlayer({ ...editPlayer, succession: e.target.value })} style={inputStyleMini}>
                          <option value="Ready">Ready</option>
                          <option value="Risk">Risk</option>
                          <option value="Development">Development</option>
                          <option value="Future">Future</option>
                        </select>
                      </td>
                      <td>
                        <select value={editPlayer.risk} onChange={e => setEditPlayer({ ...editPlayer, risk: e.target.value })} style={inputStyleMini}>
                          <option value="fit">Fit</option>
                          <option value="overuse">Overuse</option>
                          <option value="injury">Injury</option>
                          <option value="development">Development</option>
                        </select>
                      </td>
                      <td><input type="checkbox" checked={editPlayer.injury} onChange={e => setEditPlayer({ ...editPlayer, injury: e.target.checked })} /></td>
                      <td><input type="checkbox" checked={editPlayer.captain} onChange={e => setEditPlayer({ ...editPlayer, captain: e.target.checked })} /></td>
                      <td><input type="checkbox" checked={editPlayer.bench} onChange={e => setEditPlayer({ ...editPlayer, bench: e.target.checked })} /></td>
                      <td><input type="number" value={editPlayer.value} min={0} step={5000} onChange={e => setEditPlayer({ ...editPlayer, value: Number(e.target.value) })} style={inputStyleMini} /></td>
                      <td>
                        <button onClick={editPlayerSave} style={{ ...btnStyle, background: "#1de682", color: "#232a2e", marginRight: 3 }}><FaClipboardCheck /></button>
                        <button onClick={cancelEdit} style={{ ...btnStyle, background: "#ff4848", color: "#fff" }}><FaTrash /></button>
                      </td>
                    </tr>
                  ) : (
                    <tr key={i} style={{ background: p.injury ? "#ff484822" : p.captain ? "#FFD70022" : p.bench ? "#1de68222" : "none" }}>
                      <td style={{ fontWeight: p.captain ? 900 : 600, color: p.captain ? "#FFD700" : "#fff" }}>{p.name}</td>
                      <td>{p.pos}</td>
                      <td>{p.age}</td>
                      <td>{p.nationality}</td>
                      <td>{p.contract}</td>
                      <td>{p.minutes}</td>
                      <td style={{ color: VULN_COLORS[p.succession] || "#FFD700", fontWeight: 700 }}>{p.succession}</td>
                      <td style={{ color: VULN_COLORS[p.risk] || "#FFD700", fontWeight: 700 }}>{p.risk}</td>
                      <td>{p.injury ? <FaExclamationTriangle style={{ color: "#ff4848" }} /> : ""}</td>
                      <td>{p.captain ? <FaCrown style={{ color: "#FFD700" }} /> : ""}</td>
                      <td>{p.bench ? "✔" : ""}</td>
                      <td style={{ color: "#1de682" }}>{p.value}</td>
                      <td>
                        <button onClick={() => editPlayerStart(i)} style={{ ...btnStyle, background: "#FFD700", color: "#232a2e", marginRight: 3 }}><FaEdit /></button>
                        <button onClick={() => removePlayer(i)} style={{ ...btnStyle, background: "#ff4848", color: "#fff" }}><FaTrash /></button>
                      </td>
                    </tr>
                  )
                )}
              </tbody>
            </table>
          </div>
        </div>
        {/* Visual Radar */}
        <div style={{ flex: 1, background: "#232a2e", borderRadius: 13, boxShadow: "0 2px 18px #FFD70022", padding: 15, minWidth: 320 }}>
          <div style={{ fontWeight: 700, color: "#FFD700", fontSize: 17, marginBottom: 4 }}><FaChartPie style={{ marginRight: 7 }} /> Vulnerability Radar</div>
          <svg width={240} height={240}>
            {/* Radar axis lines */}
            {POSITIONS.map((p, i) => {
              const angle = (2 * Math.PI * i) / POSITIONS.length - Math.PI / 2;
              return (
                <g key={p.key}>
                  <line x1={120} y1={120} x2={120 + 95 * Math.cos(angle)} y2={120 + 95 * Math.sin(angle)} stroke="#FFD70066" />
                  <text x={120 + 110 * Math.cos(angle)} y={120 + 110 * Math.sin(angle)} fill="#FFD700cc" fontSize={13}
                    textAnchor={Math.cos(angle) > 0.2 ? "start" : Math.cos(angle) < -0.2 ? "end" : "middle"} alignmentBaseline="middle">{p.key}</text>
                </g>
              );
            })}
            {/* Radar polygon */}
            <polygon
              points={vuln.map((v, i) => {
                const angle = (2 * Math.PI * i) / POSITIONS.length - Math.PI / 2;
                const scale = v.flag === "risk" ? 95 : v.flag === "warn" ? 65 : 40;
                return [
                  120 + scale * Math.cos(angle),
                  120 + scale * Math.sin(angle)
                ].join(",");
              }).join(" ")}
              fill="#FFD70055"
              stroke="#FFD700"
              strokeWidth={4}
            />
          </svg>
          <div style={{ marginTop: 12, color: "#FFD700bb", fontWeight: 700, fontSize: 14 }}>Red = critical vulnerability, Yellow = thin/overused, Green = OK.</div>
        </div>
      </div>
      {/* Staff list */}
      <div style={{ marginTop: 21, background: "#232a2e", borderRadius: 10, padding: 13 }}>
        <div style={{ fontWeight: 700, color: "#FFD700", fontSize: 16 }}>Staff</div>
        <ul style={{ fontWeight: 600, fontSize: 15, color: "#FFD700bb" }}>
          {squad.staff.map(s => <li key={s.name + s.role}>{s.name} – {s.role}</li>)}
        </ul>
      </div>
      <div style={{ marginTop: 13, fontSize: 13, color: "#FFD70099", textAlign: "right" }}>
        Powered by CourtEvo Vero | “BE REAL. BE VERO.”
      </div>
    </div>
  );
};

const inputStyle = {
  marginRight: 7, marginBottom: 5, padding: 4, borderRadius: 7, border: "1px solid #FFD70077", fontSize: 15, width: 110
};
const inputStyleMini = {
  ...inputStyle, width: 65, marginBottom: 0
};
const btnStyle = {
  background: "#FFD700", color: "#232a2e", border: "none", borderRadius: 6, fontWeight: 700, fontSize: 15, padding: "7px 14px", marginRight: 6, cursor: "pointer"
};

export default SquadVulnerabilityRadarElite;
