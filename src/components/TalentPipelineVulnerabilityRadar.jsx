// src/components/TalentPipelineVulnerabilityRadarElite.jsx
import React, { useState } from 'react';
import {
  FaBasketballBall, FaExclamationTriangle, FaUsers, FaChartBar, FaShieldAlt, FaEdit, FaPlus, FaTrash, FaUndo, FaRedo, FaSave, FaFileExport, FaExchangeAlt, FaArrowRight, FaKey, FaArrowCircleUp, FaArrowCircleDown, FaHeartbeat, FaLightbulb, FaBolt
} from 'react-icons/fa';
import {
  ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip as ReTooltip, RadarChart, Radar, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Legend, Treemap
} from 'recharts';

const brand = { gold: "#FFD700", green: "#1de682", dark: "#232a2e", accent: "#283E51" };

const AGES = [
  { key: "u11", label: "U11" }, { key: "u13", label: "U13" }, { key: "u15", label: "U15" }, { key: "u17", label: "U17" }, { key: "u19", label: "U19" }, { key: "senior", label: "SENIOR" }
];
const POSITIONS = ["Guard", "Wing", "Big"];
const PATHWAYS = ["Classic", "Late Developer", "Returnee", "Transfer In", "Transfer Out"];

const demoPipeline = [
  // Each obj: ageGroup, position, count, atRisk, topProspectScore, avgPotential, injuries, succession, onMove, dropout, pathway, events: [], history, benchmark
  { age: "u11", position: "Guard", count: 4, atRisk: 1, top: 6, avg: 4.5, injuries: 0, succession: "Good", onMove: 0, dropout: 0, pathway: "Classic", events: ["Coach change"], history: [], benchmark: 5 },
  { age: "u11", position: "Wing", count: 3, atRisk: 0, top: 5, avg: 4, injuries: 0, succession: "Weak", onMove: 0, dropout: 1, pathway: "Classic", events: [], history: [], benchmark: 5 },
  { age: "u11", position: "Big", count: 2, atRisk: 1, top: 7, avg: 5, injuries: 1, succession: "Critical", onMove: 0, dropout: 0, pathway: "Late Developer", events: ["Injury crisis"], history: [], benchmark: 4 },
  // ...
  { age: "u13", position: "Guard", count: 5, atRisk: 0, top: 8, avg: 6.2, injuries: 0, succession: "Good", onMove: 1, dropout: 0, pathway: "Transfer In", events: ["Talent wave from school"], history: [], benchmark: 6 },
  { age: "u13", position: "Wing", count: 6, atRisk: 1, top: 7, avg: 6, injuries: 0, succession: "Good", onMove: 0, dropout: 1, pathway: "Classic", events: ["National team call-up"], history: [], benchmark: 5 },
  { age: "u13", position: "Big", count: 3, atRisk: 0, top: 5, avg: 4.5, injuries: 0, succession: "Weak", onMove: 0, dropout: 0, pathway: "Classic", events: [], history: [], benchmark: 5 },
  // ...
  { age: "u15", position: "Guard", count: 4, atRisk: 2, top: 7, avg: 5.6, injuries: 1, succession: "Critical", onMove: 2, dropout: 2, pathway: "Returnee", events: ["Injury", "Coach change"], history: [], benchmark: 7 },
  { age: "u15", position: "Wing", count: 5, atRisk: 0, top: 9, avg: 7.5, injuries: 0, succession: "Good", onMove: 0, dropout: 1, pathway: "Classic", events: [], history: [], benchmark: 7 },
  { age: "u15", position: "Big", count: 2, atRisk: 1, top: 7, avg: 4.5, injuries: 1, succession: "Weak", onMove: 1, dropout: 2, pathway: "Late Developer", events: ["Late PHV"], history: [], benchmark: 6 },
  // ...
  // Extend to u17, u19, senior with a mix of all features...
];

// Utility
const riskColor = (succession, count, atRisk, injuries, dropout) =>
  succession === "Critical" || count <= 2 || atRisk >= 2 || injuries >= 2 || dropout >= 2
    ? "#ff4848"
    : succession === "Weak" || atRisk === 1 || injuries === 1 || dropout === 1
      ? "#FFD700"
      : "#1de682";

// Root-Cause Analyzer: returns top root cause(s) for risk nodes
const rootCause = p => {
  if (p.events && p.events.length) return p.events.join(", ");
  if (p.injuries > 0) return "Injuries";
  if (p.dropout > 0) return "Dropout";
  if (p.succession === "Critical") return "No successor";
  if (p.atRisk > 0) return "Multiple at risk";
  return "Healthy";
};

// Boardroom Alert Generator
const alertText = (pipeline) => {
  const critical = pipeline.filter(p => p.succession === "Critical" || p.count <= 2 || p.atRisk >= 2);
  if (critical.length > 0) {
    const c = critical[0];
    return `ALERT: ${c.age} ${c.position} pipeline at critical low/risk. Depth: ${c.count}, At risk: ${c.atRisk}, Succession: ${c.succession}, Events: ${c.events?.join(", ")}. Action: targeted recruitment/intervention.`;
  }
  const weak = pipeline.filter(p => p.succession === "Weak");
  if (weak.length > 0) {
    const w = weak[0];
    return `WARNING: ${w.age} ${w.position} pipeline is weak. Root: ${rootCause(w)}. Start succession/depth action.`;
  }
  return "Pipeline & succession healthy. Maintain athlete monitoring.";
};

const TalentPipelineVulnerabilityRadarElite = () => {
  const [pipeline, setPipeline] = useState(demoPipeline);
  const [history, setHistory] = useState([demoPipeline]);
  const [redoStack, setRedoStack] = useState([]);
  const [selected, setSelected] = useState(null);
  const [tab, setTab] = useState("pathway");
  const [scenarioName, setScenarioName] = useState('');
  const [savedScenarios, setSavedScenarios] = useState([]);

  // CRUD
  const addRow = r => {
    const next = [...pipeline, { ...r, id: Date.now(), events: r.events ? r.events : [] }];
    setPipeline(next); setHistory([...history, next]); setRedoStack([]); setSelected(null);
  };
  const updateRow = r => {
    const next = pipeline.map(p => p.age === r.age && p.position === r.position ? r : p);
    setPipeline(next); setHistory([...history, next]); setRedoStack([]); setSelected(null);
  };
  const deleteRow = (age, position) => {
    const next = pipeline.filter(p => !(p.age === age && p.position === position));
    setPipeline(next); setHistory([...history, next]); setRedoStack([]); setSelected(null);
  };
  // Undo/Redo
  const undo = () => {
    if (history.length <= 1) return;
    setRedoStack([pipeline, ...redoStack]);
    const prev = history[history.length - 2];
    setPipeline(prev);
    setHistory(history.slice(0, -1));
    setSelected(null);
  };
  const redo = () => {
    if (redoStack.length === 0) return;
    setHistory([...history, redoStack[0]]);
    setPipeline(redoStack[0]);
    setRedoStack(redoStack.slice(1));
    setSelected(null);
  };

  // Scenario Save/Load
  const saveScenario = () => {
    if (!scenarioName) return;
    setSavedScenarios([...savedScenarios, { name: scenarioName, pipeline: JSON.parse(JSON.stringify(pipeline)) }]);
    setScenarioName('');
  };
  const loadScenario = idx => {
    setPipeline(savedScenarios[idx].pipeline);
    setHistory([...history, savedScenarios[idx].pipeline]);
    setRedoStack([]);
    setSelected(null);
  };

  // Export
  const exportCSV = () => {
    const csv = [
      "Age,Position,Count,AtRisk,Top,Avg,Injuries,Succession,OnMove,Dropout,Pathway,Events"
    ].concat(pipeline.map(p =>
      [p.age, p.position, p.count, p.atRisk, p.top, p.avg, p.injuries, p.succession, p.onMove, p.dropout, p.pathway, (p.events || []).join("|")].join(",")
    )).join('\n');
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = "talent_pipeline_elite.csv";
    a.click(); URL.revokeObjectURL(url);
  };

  // Dynamic Benchmark
  const getBenchmark = (age, position) => {
    // Example: returns league avg for this age/position
    const found = pipeline.find(p => p.age === age && p.position === position);
    return found?.benchmark || 6;
  };

  // UI
  return (
    <div style={{
      background: brand.dark, color: "#fff", fontFamily: "Segoe UI, sans-serif",
      borderRadius: 22, padding: 28, boxShadow: "0 8px 48px #232a2e44", maxWidth: 1500, margin: "0 auto"
    }}>
      {/* Header */}
      <div style={{ display: "flex", alignItems: "center", gap: 13, marginBottom: 14 }}>
        <FaBasketballBall size={30} color={brand.gold} />
        <h2 style={{
          fontWeight: 900, fontSize: 28, color: brand.gold, letterSpacing: 2, margin: 0
        }}>
          Talent Pipeline & Vulnerability Radar
        </h2>
        <span style={{
          background: brand.gold, color: "#232a2e", fontWeight: 700, borderRadius: 8,
          padding: '3px 16px', fontSize: 14, marginLeft: 22, boxShadow: '0 2px 10px #FFD70022'
        }}>
          Elite Consulting Edition | CourtEvo Vero
        </span>
      </div>
      {/* Alerts */}
      <div style={{
        background: "#283E51", borderRadius: 12, padding: 16, marginBottom: 18, fontWeight: 700,
        color: alertText(pipeline).startsWith("ALERT") ? "#ff4848" : alertText(pipeline).startsWith("WARNING") ? "#FFD700" : "#1de682"
      }}>
        <FaExclamationTriangle style={{ marginRight: 8, color: alertText(pipeline).startsWith("ALERT") ? "#ff4848" : alertText(pipeline).startsWith("WARNING") ? "#FFD700" : "#1de682" }} />
        {alertText(pipeline)}
      </div>
      {/* Tabs */}
      <div style={{ display: "flex", gap: 18, margin: "18px 0 10px 0" }}>
        {[
          { key: "pathway", label: <><FaArrowRight style={{ marginRight: 8 }} /> Pathway Map</> },
          { key: "radar", label: <><FaShieldAlt style={{ marginRight: 8 }} /> Vulnerability Radar</> },
          { key: "depth", label: <><FaUsers style={{ marginRight: 8 }} /> Depth Chart</> },
          { key: "event", label: <><FaBolt style={{ marginRight: 8 }} /> Critical Event Log</> },
          { key: "mobility", label: <><FaExchangeAlt style={{ marginRight: 8 }} /> Mobility Watch</> }
        ].map(tabItem => (
          <button key={tabItem.key}
            onClick={() => setTab(tabItem.key)}
            style={{
              background: tab === tabItem.key ? brand.gold : brand.accent,
              color: tab === tabItem.key ? '#232a2e' : '#fff',
              fontWeight: 700, border: 'none', borderRadius: 13,
              fontSize: 15, padding: '8px 24px', cursor: 'pointer',
              boxShadow: tab === tabItem.key ? '0 2px 14px #FFD70033' : 'none'
            }}>
            {tabItem.label}
          </button>
        ))}
      </div>
      {/* Pathway Map */}
      {tab === "pathway" && (
        <div style={{
          background: "#232a2e", borderRadius: 18, padding: 24, marginTop: 7
        }}>
          <h4 style={{ color: brand.gold, fontWeight: 700, marginBottom: 12 }}>Talent Pathway Map</h4>
          <div style={{ display: "flex", gap: 30, justifyContent: "center", flexWrap: "wrap" }}>
            {AGES.map(a =>
              <div key={a.key} style={{ minWidth: 160, background: "#283E51", borderRadius: 16, padding: 14, boxShadow: "0 2px 14px #FFD70022", marginBottom: 20 }}>
                <div style={{ color: brand.gold, fontWeight: 800, fontSize: 19, marginBottom: 7 }}>{a.label}</div>
                {POSITIONS.map(pos => {
                  const p = pipeline.find(x => x.age === a.key && x.position === pos);
                  return p ? (
                    <div key={pos} style={{ color: riskColor(p.succession, p.count, p.atRisk, p.injuries, p.dropout), fontWeight: 700, marginBottom: 7 }}>
                      {pos}: <span style={{ color: "#FFD700" }}>{p.count}</span> <FaBasketballBall />
                      <br /><span style={{ fontSize: 13, color: "#1de682" }}>{p.pathway}</span>
                      {p.events.length > 0 && (
                        <div style={{ fontSize: 12, color: "#FFD70099" }}>
                          <FaBolt style={{ marginRight: 4 }} /> {p.events.join(", ")}
                        </div>
                      )}
                      <div style={{ fontSize: 12 }}>
                        <span style={{ color: "#FFD700" }}>Succession:</span> {p.succession}
                        <br /><span style={{ color: "#FFD700" }}>Top:</span> {p.top} | <span style={{ color: "#FFD700" }}>Avg:</span> {p.avg}
                      </div>
                    </div>
                  ) : null;
                })}
              </div>
            )}
          </div>
        </div>
      )}
      {/* Vulnerability Radar */}
      {tab === "radar" && (
        <div style={{
          background: "#283E51", borderRadius: 18, padding: 24, marginTop: 7
        }}>
          <h4 style={{ color: brand.gold, fontWeight: 700, marginBottom: 12 }}>Risk/Vulnerability Radar</h4>
          <ResponsiveContainer width="100%" height={250}>
            <RadarChart cx="50%" cy="50%" outerRadius={110} data={pipeline.map(p => ({
              name: p.age + " " + p.position,
              risk: (p.atRisk + p.injuries + (p.succession === "Critical" ? 3 : p.succession === "Weak" ? 2 : 0) + (p.count < 3 ? 2 : 0))
            }))}>
              <PolarGrid />
              <PolarAngleAxis dataKey="name" stroke="#FFD700" />
              <PolarRadiusAxis angle={30} domain={[0, 7]} />
              <Radar name="Risk" dataKey="risk" stroke="#ff4848" fill="#ff4848" fillOpacity={0.15} />
              <Legend />
              <ReTooltip />
            </RadarChart>
          </ResponsiveContainer>
        </div>
      )}
      {/* Depth Chart */}
      {tab === "depth" && (
        <div style={{
          background: "#232a2e", borderRadius: 18, padding: 24, marginTop: 7
        }}>
          <h4 style={{ color: brand.gold, fontWeight: 700, marginBottom: 12 }}>Depth Chart & Benchmark</h4>
          <table style={{ width: "100%", borderCollapse: "collapse", fontSize: 15, color: "#fff" }}>
            <thead>
              <tr>
                <th>Age</th><th>Position</th><th>Count</th><th>At Risk</th><th>Top</th><th>Avg</th><th>Injuries</th>
                <th>Succession</th><th>Pathway</th><th>On Move</th><th>Dropout</th><th>Benchmark</th><th>Root Cause</th><th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {pipeline.map((p, i) =>
                <tr key={p.age + "_" + p.position} style={{ borderBottom: "1px solid #FFD70022", background: riskColor(p.succession, p.count, p.atRisk, p.injuries, p.dropout) !== "#1de682" ? "#FFD70022" : "transparent" }}>
                  <td>{p.age}</td><td>{p.position}</td>
                  <td>{p.count}</td>
                  <td style={{ color: p.atRisk > 0 ? "#ff4848" : "#1de682" }}>{p.atRisk}</td>
                  <td style={{ color: p.top >= 8 ? "#1de682" : p.top <= 5 ? "#ff4848" : "#FFD700" }}>{p.top}</td>
                  <td>{p.avg}</td>
                  <td style={{ color: p.injuries > 0 ? "#ff4848" : "#1de682" }}>{p.injuries}</td>
                  <td style={{ color: p.succession === "Critical" ? "#ff4848" : p.succession === "Weak" ? "#FFD700" : "#1de682" }}>{p.succession}</td>
                  <td>{p.pathway}</td>
                  <td>{p.onMove}</td>
                  <td>{p.dropout}</td>
                  <td style={{ color: p.count < getBenchmark(p.age, p.position) ? "#ff4848" : "#1de682" }}>{getBenchmark(p.age, p.position)}</td>
                  <td>{rootCause(p)}</td>
                  <td>
                    <button onClick={() => setSelected(p)} style={{ ...btnStyle, background: brand.green, color: "#232a2e", padding: "2px 7px", marginRight: 4 }}><FaEdit /></button>
                    <button onClick={() => deleteRow(p.age, p.position)} style={{ ...btnStyle, background: "#ff4848", color: "#fff", padding: "2px 7px" }}><FaTrash /></button>
                  </td>
                </tr>
              )}
            </tbody>
          </table>
          <button onClick={() => setSelected({})} style={{ ...btnStyle, marginTop: 11, background: brand.gold, color: "#232a2e" }}>
            <FaPlus style={{ marginRight: 7 }} /> Add/Insert Row
          </button>
          {selected && (
            <form onSubmit={e => {
              e.preventDefault();
              const f = e.target;
              const row = {
                age: f.age.value,
                position: f.position.value,
                count: Number(f.count.value),
                atRisk: Number(f.atRisk.value),
                top: Number(f.top.value),
                avg: Number(f.avg.value),
                injuries: Number(f.injuries.value),
                succession: f.succession.value,
                pathway: f.pathway.value,
                onMove: Number(f.onMove.value),
                dropout: Number(f.dropout.value),
                events: f.events.value.split('|').map(s => s.trim()).filter(Boolean),
                benchmark: Number(f.benchmark.value)
              };
              if (pipeline.find(p => p.age === row.age && p.position === row.position)) updateRow(row);
              else addRow(row);
              setSelected(null);
              f.reset();
            }} style={{
              marginTop: 12, background: "#283E51", borderRadius: 10, padding: 12
            }}>
              <select name="age" defaultValue={selected.age || "u11"} style={inputStyle}>{AGES.map(a => <option key={a.key} value={a.key}>{a.label}</option>)}</select>
              <select name="position" defaultValue={selected.position || "Guard"} style={inputStyle}>{POSITIONS.map(pos => <option key={pos}>{pos}</option>)}</select>
              <input name="count" type="number" placeholder="Count" min={0} required defaultValue={selected.count || ""} style={inputStyle} />
              <input name="atRisk" type="number" placeholder="At Risk" min={0} required defaultValue={selected.atRisk || ""} style={inputStyle} />
              <input name="top" type="number" placeholder="Top Prospect (1-10)" min={1} max={10} required defaultValue={selected.top || ""} style={inputStyle} />
              <input name="avg" type="number" step={0.1} placeholder="Avg Potential" required defaultValue={selected.avg || ""} style={inputStyle} />
              <input name="injuries" type="number" placeholder="Injuries" min={0} required defaultValue={selected.injuries || ""} style={inputStyle} />
              <select name="succession" defaultValue={selected.succession || "Good"} style={inputStyle}>
                <option>Good</option><option>Weak</option><option>Critical</option>
              </select>
              <select name="pathway" defaultValue={selected.pathway || "Classic"} style={inputStyle}>
                {PATHWAYS.map(pw => <option key={pw}>{pw}</option>)}
              </select>
              <input name="onMove" type="number" placeholder="On Move" min={0} required defaultValue={selected.onMove || ""} style={inputStyle} />
              <input name="dropout" type="number" placeholder="Dropout" min={0} required defaultValue={selected.dropout || ""} style={inputStyle} />
              <input name="benchmark" type="number" placeholder="Benchmark" min={0} required defaultValue={selected.benchmark || 6} style={inputStyle} />
              <input name="events" placeholder="Events (pipe-separated)" defaultValue={selected.events?.join('|') || ""} style={inputStyle} />
              <button type="submit" style={{ ...btnStyle, marginRight: 11 }}>{pipeline.find(p => p.age === selected.age && p.position === selected.position) ? "Update" : "Add"}</button>
              <button type="button" onClick={() => setSelected(null)} style={{ ...btnStyle, background: "#ff4848", color: "#fff" }}>Cancel</button>
            </form>
          )}
        </div>
      )}
      {/* Critical Event Log */}
      {tab === "event" && (
        <div style={{
          background: "#283E51", borderRadius: 18, padding: 24, marginTop: 7
        }}>
          <h4 style={{ color: brand.gold, fontWeight: 700, marginBottom: 12 }}>Critical Incident & Event Log</h4>
          <table style={{ width: "100%", borderCollapse: "collapse", fontSize: 15, color: "#fff" }}>
            <thead>
              <tr>
                <th>Age</th><th>Position</th><th>Event(s)</th>
              </tr>
            </thead>
            <tbody>
              {pipeline.filter(p => p.events && p.events.length).map((p, i) =>
                <tr key={p.age + "_" + p.position} style={{ borderBottom: "1px solid #FFD70022" }}>
                  <td>{p.age}</td>
                  <td>{p.position}</td>
                  <td>{p.events.join(", ")}</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}
      {/* Mobility Watch */}
      {tab === "mobility" && (
        <div style={{
          background: "#232a2e", borderRadius: 18, padding: 24, marginTop: 7
        }}>
          <h4 style={{ color: brand.gold, fontWeight: 700, marginBottom: 12 }}>Talent Mobility Watch</h4>
          <table style={{ width: "100%", borderCollapse: "collapse", fontSize: 15, color: "#fff" }}>
            <thead>
              <tr>
                <th>Age</th><th>Position</th><th>On Move</th><th>Dropout</th>
              </tr>
            </thead>
            <tbody>
              {pipeline.filter(p => p.onMove > 0 || p.dropout > 0).map((p, i) =>
                <tr key={p.age + "_" + p.position} style={{ borderBottom: "1px solid #FFD70022" }}>
                  <td>{p.age}</td>
                  <td>{p.position}</td>
                  <td style={{ color: p.onMove > 0 ? "#FFD700" : "#1de682" }}>{p.onMove}</td>
                  <td style={{ color: p.dropout > 0 ? "#ff4848" : "#1de682" }}>{p.dropout}</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}
      {/* Controls */}
      <div style={{
        margin: "28px 0 5px 0", display: "flex", gap: 14, alignItems: "center"
      }}>
        <button onClick={undo} style={btnStyle}><FaUndo /> Undo</button>
        <button onClick={redo} style={btnStyle}><FaRedo /> Redo</button>
        <button onClick={exportCSV} style={{ ...btnStyle, background: brand.green, color: "#232a2e" }}><FaFileExport /> Export CSV</button>
        <input value={scenarioName} onChange={e => setScenarioName(e.target.value)} placeholder="Scenario Name"
          style={{ borderRadius: 6, padding: 5, border: "1px solid #FFD70077", fontWeight: 700, marginRight: 7, background: "#181e23", color: "#fff" }} />
        <button onClick={saveScenario} style={{ ...btnStyle, background: brand.gold, color: "#232a2e" }}><FaSave /> Save</button>
        {savedScenarios.length > 0 && (
          <span style={{ color: brand.gold, fontWeight: 600, fontSize: 14, marginLeft: 6 }}>
            Load:
            {savedScenarios.map((sc, idx) =>
              <button key={idx} onClick={() => loadScenario(idx)} style={{
                background: '#FFD700', color: '#232a2e', fontWeight: 700, border: 'none', borderRadius: 6, padding: '3px 8px', marginLeft: 5
              }}><FaFileExport style={{ marginRight: 4 }} />{sc.name}</button>
            )}
          </span>
        )}
      </div>
      <div style={{ marginTop: 13, fontSize: 13, color: "#FFD70099", textAlign: "right" }}>
        Powered by CourtEvo Vero | “BE REAL. BE VERO.”
      </div>
    </div>
  );
};

const inputStyle = {
  marginRight: 7, marginBottom: 5, padding: 4, borderRadius: 7, border: "1px solid #FFD70077", fontSize: 15, width: 110
};
const btnStyle = {
  background: "#FFD700", color: "#232a2e", border: "none", borderRadius: 6, fontWeight: 700, fontSize: 15, padding: "7px 14px", marginRight: 6, cursor: "pointer"
};

export default TalentPipelineVulnerabilityRadarElite;
