import React, { useState, useRef } from "react";
import {
  FaExclamationTriangle, FaUser, FaHeartbeat, FaRegCalendarCheck, FaArrowUp, FaArrowDown, FaCheckCircle, FaFileExport, FaRegLightbulb, FaClipboardList, FaCrown, FaUserTie, FaUserAlt, FaUpload, FaChartLine, FaBalanceScale, FaBolt, FaPen
} from "react-icons/fa";
import "./TalentVulnerabilityTracker.css";

// DEMO DATA
const INIT_ATHLETES = [
  {
    id: 1,
    name: "Luka Marić",
    team: "U14",
    age: 13,
    period: "Growth Sport",
    start: "2025-05-20",
    end: "2025-09-20",
    risk: "High",
    status: "Ongoing",
    photo: "",
    actionPlan: "Weekly S&C review, nutrition plan, parent consult.",
    riskFactors: [
      { label: "Growth Velocity", value: 8, weight: 3 },
      { label: "Fatigue", value: 5, weight: 2 },
      { label: "Recent Injury", value: 7, weight: 1 },
    ],
    boardNotes: [{ date: "2025-05-21", by: "Board", note: "Plan signed by President.", signed: true }],
    chat: [],
    history: [
      { date: "2025-05-20", actor: "Board", note: "Flagged growth spurt, assigned S&C monitoring", signed: false, type: "Board" },
      { date: "2025-06-12", actor: "S&C Coach", note: "Program adapted, nutritionist booked", signed: true, type: "Coach" }
    ]
  },
  {
    id: 2,
    name: "Marko Bandić",
    team: "U16",
    age: 15,
    period: "Transition to Specialization",
    start: "2025-04-10",
    end: "2025-07-01",
    risk: "Medium",
    status: "Ongoing",
    photo: "",
    actionPlan: "Coach reviews bi-weekly, academic stress monitoring.",
    riskFactors: [
      { label: "Motivation", value: 4, weight: 2 },
      { label: "Exam Stress", value: 6, weight: 2 },
      { label: "Role Clarity", value: 3, weight: 1 },
    ],
    boardNotes: [],
    chat: [],
    history: [
      { date: "2025-04-10", actor: "Board", note: "Board reviewed specialization", signed: true, type: "Board" },
      { date: "2025-05-19", actor: "Coach", note: "Progressing well, flagged exam stress", signed: false, type: "Coach" }
    ]
  },
  {
    id: 3,
    name: "Filip Horvat",
    team: "U12",
    age: 11,
    period: "Fundamental Skills",
    start: "2025-01-05",
    end: "2025-04-30",
    risk: "Low",
    status: "Resolved",
    photo: "",
    actionPlan: "Review next cycle, adapt drills as needed.",
    riskFactors: [
      { label: "Skill Gaps", value: 2, weight: 2 },
      { label: "Attendance", value: 1, weight: 1 },
    ],
    boardNotes: [],
    chat: [],
    history: [
      { date: "2025-02-12", actor: "Coach", note: "Skills program assigned", signed: true, type: "Coach" },
      { date: "2025-04-28", actor: "Coach", note: "Skills achieved", signed: true, type: "Coach" }
    ]
  }
];

const PERIOD_COLORS = {
  "Growth Spurt": "#FFD700",
  "Transition to Specialization": "#1de682",
  "Fundamental Skills": "#2ea2f0"
};
const RISK_COLORS = { High: "#FF4444", Medium: "#FFD700", Low: "#1de682" };
const STATUS_COLORS = { Ongoing: "#FFD700", Resolved: "#1de682" };
const ACTOR_ICONS = { "Board": <FaCrown />, "Coach": <FaUserTie />, "S&C Coach": <FaUserAlt /> };

function calcVulnerability(riskFactors) {
  const score = riskFactors.reduce((sum, f) => sum + f.value * f.weight, 0) / (riskFactors.reduce((s, f) => s + f.weight, 0) || 1);
  return Math.round(score * 10); // scale 0-100
}

export default function TalentVulnerabilityTracker() {
  const [athletes, setAthletes] = useState(INIT_ATHLETES);
  const [filter, setFilter] = useState("");
  const [teamFilter, setTeamFilter] = useState("");
  const [riskFilter, setRiskFilter] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const [selected, setSelected] = useState(athletes[0].id);
  const [compare, setCompare] = useState([]);
  const [aiAdvice, setAiAdvice] = useState("");
  const [action, setAction] = useState({ date: "", note: "", actor: "Board" });
  const [newFactor, setNewFactor] = useState({ label: "", value: 5, weight: 1 });
  const [exportLog, setExportLog] = useState([]);
  const [audit, setAudit] = useState([]);
  const [dragIdx, setDragIdx] = useState(null);
  const [showDigest, setShowDigest] = useState(false);
  const [editingActionPlan, setEditingActionPlan] = useState(null);
  const [boardNote, setBoardNote] = useState("");
  const [privateChat, setPrivateChat] = useState("");
  const fileInputRef = useRef();

  function onDragStart(idx) { setDragIdx(idx); }
  function onDrop(idx) {
    if (dragIdx === null || dragIdx === idx) return;
    let arr = [...athletes];
    const [removed] = arr.splice(dragIdx, 1);
    arr.splice(idx, 0, removed);
    setAthletes(arr);
    setAudit(aud => [
      { date: new Date().toLocaleString(), action: `Reordered: ${removed.name} to position ${idx + 1}` },
      ...aud
    ]);
  }

  function handlePhotoUpload(e) {
    if (e.target.files && e.target.files[0]) {
      const url = URL.createObjectURL(e.target.files[0]);
      setAthletes(athletes =>
        athletes.map(a =>
          a.id === selected ? { ...a, photo: url } : a
        )
      );
      setAudit(aud => [
        { date: new Date().toLocaleString(), action: `Photo uploaded for ${athletes.find(a => a.id === selected).name}` },
        ...aud
      ]);
    }
  }

  const teams = Array.from(new Set(athletes.map(a => a.team)));
  const filtered = athletes.filter(a =>
    (!filter || a.name.toLowerCase().includes(filter.toLowerCase())) &&
    (!teamFilter || a.team === teamFilter) &&
    (!riskFilter || a.risk === riskFilter) &&
    (!statusFilter || a.status === statusFilter)
  );
  const athlete = athletes.find(a => a.id === selected);

  function toggleCompare(id) {
    setCompare(cmp => cmp.includes(id) ? cmp.filter(i => i !== id) : [...cmp, id].slice(-3));
  }
  const compareList = [athlete, ...athletes.filter(a => compare.includes(a.id) && a.id !== athlete.id)];

  function addRiskFactor() {
    if (!newFactor.label.trim()) return;
    setAthletes(athletes =>
      athletes.map(a =>
        a.id === selected
          ? { ...a, riskFactors: [...a.riskFactors, { ...newFactor }] }
          : a
      )
    );
    setNewFactor({ label: "", value: 5, weight: 1 });
    setAudit(aud => [
      { date: new Date().toLocaleString(), action: `Risk factor added for ${athlete.name}: ${newFactor.label}` },
      ...aud
    ]);
  }
  function updateFactor(idx, key, val) {
    setAthletes(athletes =>
      athletes.map(a =>
        a.id === selected
          ? {
            ...a,
            riskFactors: a.riskFactors.map((f, i) => i === idx ? { ...f, [key]: key === "label" ? val : parseInt(val) } : f)
          }
          : a
      )
    );
  }
  function removeFactor(idx) {
    setAthletes(athletes =>
      athletes.map(a =>
        a.id === selected
          ? { ...a, riskFactors: a.riskFactors.filter((_, i) => i !== idx) }
          : a
      )
    );
  }

  function assignAction() {
    if (!action.date || !action.note) return;
    setAthletes(athletes =>
      athletes.map(a =>
        a.id === selected
          ? { ...a, history: [...a.history, { ...action, signed: false }] }
          : a
      )
    );
    setAudit(aud => [
      { date: new Date().toLocaleString(), action: `Action added for ${athlete.name}: ${action.note}` },
      ...aud
    ]);
    setAction({ date: "", note: "", actor: "Board" });
  }
  function signOffAction(idx) {
    setAthletes(athletes =>
      athletes.map(a =>
        a.id === selected
          ? {
            ...a,
            history: a.history.map((h, i) => i === idx ? { ...h, signed: true } : h)
          }
          : a
      )
    );
    setAudit(aud => [
      { date: new Date().toLocaleString(), action: `Sign-off: ${athlete.name} action #${idx + 1}` },
      ...aud
    ]);
  }
  function resolvePeriod() {
    setAthletes(athletes =>
      athletes.map(a =>
        a.id === selected
          ? { ...a, status: "Resolved", history: [...a.history, { date: new Date().toLocaleDateString(), actor: "Board", note: "Marked as resolved by board", signed: true }] }
          : a
      )
    );
    setAudit(aud => [
      { date: new Date().toLocaleString(), action: `Marked ${athlete.name} as resolved` },
      ...aud
    ]);
  }
  function editActionPlan() { setEditingActionPlan(athlete.actionPlan); }
  function saveActionPlan() {
    setAthletes(athletes =>
      athletes.map(a =>
        a.id === selected ? { ...a, actionPlan: editingActionPlan } : a
      )
    );
    setAudit(aud => [
      { date: new Date().toLocaleString(), action: `Action plan edited for ${athlete.name}` },
      ...aud
    ]);
    setEditingActionPlan(null);
  }
  function addBoardNote() {
    if (!boardNote.trim()) return;
    setAthletes(athletes =>
      athletes.map(a =>
        a.id === selected
          ? { ...a, boardNotes: [...a.boardNotes, { date: new Date().toLocaleDateString(), by: "Board", note: boardNote, signed: false }] }
          : a
      )
    );
    setAudit(aud => [
      { date: new Date().toLocaleString(), action: `Boardroom note added for ${athlete.name}` },
      ...aud
    ]);
    setBoardNote("");
  }
  function signNote(idx) {
    setAthletes(athletes =>
      athletes.map(a =>
        a.id === selected
          ? {
            ...a,
            boardNotes: a.boardNotes.map((n, i) => i === idx ? { ...n, signed: true } : n)
          }
          : a
      )
    );
  }
  function addChat() {
    if (!privateChat.trim()) return;
    setAthletes(athletes =>
      athletes.map(a =>
        a.id === selected
          ? { ...a, chat: [...a.chat, { date: new Date().toLocaleTimeString(), msg: privateChat }] }
          : a
      )
    );
    setPrivateChat("");
  }
  function runAI() {
    if (!athlete) return;
    let g = calcVulnerability(athlete.riskFactors);
    let msg = `AI Executive Insights for ${athlete.name}:
- Vulnerability Score: ${g}/100 (${g >= 60 ? "High" : g >= 40 ? "Medium" : "Low"})
`;
    if (g >= 60) msg += "- Critical: Immediate board and S&C intervention required.\n";
    else if (g >= 40) msg += "- Warning: Monitor bi-weekly, add custom risk factors.\n";
    else msg += "- Stable: Routine monitoring sufficient.\n";
    msg += `- Next boardroom review: ${athlete.status === "Resolved" ? "N/A (Resolved)" : "Within 14 days"}.\n`;
    setAiAdvice(msg);
  }
  function exportBoardroom() {
    setExportLog(log => [
      { date: new Date().toLocaleString(), count: filtered.length, type: "PDF" },
      ...log
    ]);
    setAudit(aud => [
      { date: new Date().toLocaleString(), action: "Boardroom PDF exported" },
      ...aud
    ]);
    alert("Exported as PDF (demo). PDF preview/real export hooks ready.");
  }
  const majorRisk = athlete.riskFactors.some(f => f.value * f.weight > 20);
  const actionOverdue = athlete.history.length > 0 && !athlete.history[athlete.history.length - 1].signed;
  const progress = athlete.status === "Resolved" ? 100 : Math.min(calcVulnerability(athlete.riskFactors), 100);

  return (
    <div className="tvt-root">
      <div className="tvt-header">
        <span className="tvt-title"><FaHeartbeat style={{ marginRight: 11 }} />TALENT VULNERABILITY TRACKER</span>
        <div className="tvt-quick-stats">
          <span className="tvt-stats-chip" style={{ background: "#FF4444" }}>
            At Risk: <b>{athletes.filter(a => a.risk === "High" && a.status === "Ongoing").length}</b>
          </span>
          <span className="tvt-stats-chip" style={{ background: "#1de682" }}>
            Resolved: <b>{athletes.filter(a => a.status === "Resolved").length}</b>
          </span>
        </div>
        <button className="tvt-export-btn" onClick={exportBoardroom}>
          <FaFileExport style={{ marginRight: 7 }} />Export PDF
        </button>
        <button className="tvt-digest-btn" onClick={() => setShowDigest(d => !d)}>
          Executive Digest
        </button>
      </div>
      {(majorRisk || actionOverdue) && (
        <div className="tvt-alert-banner">
          <FaBolt /> {majorRisk ? "Major boardroom risk factor detected." : ""} {actionOverdue ? "Board action plan is overdue for sign-off." : ""}
        </div>
      )}
      {showDigest && (
        <div className="tvt-digest-panel">
          <div className="tvt-digest-title">Executive Digest Snapshot</div>
          <ul>
            {athletes.filter(a=>a.risk==="High" && a.status==="Ongoing").map(a=>(
              <li key={a.id}>
                <b>{a.name} ({a.team})</b> — {a.period}, <span style={{color:RISK_COLORS[a.risk]}}>{a.risk}</span>
                <br/>
                <span className="tvt-digest-action">{a.actionPlan}</span>
              </li>
            ))}
          </ul>
        </div>
      )}
      <div className="tvt-compare-bar">
        <span className="tvt-compare-label">Compare:</span>
        {[athlete, ...athletes.filter(a => compare.includes(a.id) && a.id !== athlete.id)].map(a =>
          <span key={a.id} className="tvt-compare-chip" style={{ background: RISK_COLORS[a.risk] }}>
            {a.name} <button onClick={() => toggleCompare(a.id)}>&times;</button>
          </span>
        )}
        {athletes.filter(a => !compare.includes(a.id) && a.id !== athlete.id).map(a =>
          <button key={a.id} className="tvt-compare-add" onClick={() => toggleCompare(a.id)}>{a.name}</button>
        )}
      </div>
      {compareList.length > 1 && (
        <div className="tvt-compare-table">
          <table>
            <thead>
              <tr>
                <th>Athlete</th>
                <th>Team</th>
                <th>Risk</th>
                <th>Status</th>
                <th>Vulnerability Score</th>
                <th>Action Plan</th>
              </tr>
            </thead>
            <tbody>
              {compareList.map(a => (
                <tr key={a.id}>
                  <td>{a.name}</td>
                  <td>{a.team}</td>
                  <td style={{ color: RISK_COLORS[a.risk] }}>{a.risk}</td>
                  <td style={{ color: STATUS_COLORS[a.status] }}>{a.status}</td>
                  <td><b>{calcVulnerability(a.riskFactors)}</b></td>
                  <td>{a.actionPlan}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      <div className="tvt-main-grid">
        <div className="tvt-list">
          <input
            className="tvt-filter"
            placeholder="Search athlete…"
            value={filter}
            onChange={e => setFilter(e.target.value)}
          />
          <select className="tvt-select" value={teamFilter} onChange={e => setTeamFilter(e.target.value)}>
            <option value="">All Teams</option>
            {teams.map(team => <option value={team} key={team}>{team}</option>)}
          </select>
          <select className="tvt-select" value={riskFilter} onChange={e => setRiskFilter(e.target.value)}>
            <option value="">All Risk</option>
            <option value="High">High</option>
            <option value="Medium">Medium</option>
            <option value="Low">Low</option>
          </select>
          <select className="tvt-select" value={statusFilter} onChange={e => setStatusFilter(e.target.value)}>
            <option value="">All Status</option>
            <option value="Ongoing">Ongoing</option>
            <option value="Resolved">Resolved</option>
          </select>
          <ul>
            {filtered.map((a, idx) =>
              <li
                key={a.id}
                className={`tvt-athlete-card${a.id === selected ? " selected" : ""}`}
                draggable
                onDragStart={() => onDragStart(idx)}
                onDragOver={e => e.preventDefault()}
                onDrop={() => onDrop(idx)}
                title="Drag to reorder (boardroom urgency)"
                onClick={() => setSelected(a.id)}
              >
                <span className="tvt-avatar">
                  {a.photo
                    ? <img src={a.photo} alt="" />
                    : a.name.split(" ").map(x => x[0]).join("")}
                </span>
                <span className="tvt-athlete-name">{a.name}</span>
                <span className="tvt-athlete-team">{a.team}</span>
                <span className="tvt-period-chip" style={{ background: PERIOD_COLORS[a.period] }}>{a.period}</span>
                <span className="tvt-risk-chip" style={{ background: RISK_COLORS[a.risk] }}>{a.risk}</span>
                <span className="tvt-status-chip" style={{ background: STATUS_COLORS[a.status] }}>{a.status}</span>
              </li>
            )}
          </ul>
        </div>
        <div className="tvt-dashboard">
          <div className="tvt-athlete-head">
            <span className="tvt-avatar-lg">
              {athlete.photo
                ? <img src={athlete.photo} alt="" />
                : athlete.name.split(" ").map(x => x[0]).join("")}
              <button className="tvt-upload-btn" title="Upload athlete photo" onClick={() => fileInputRef.current.click()}><FaUpload /></button>
              <input type="file" ref={fileInputRef} style={{display:"none"}} accept="image/*" onChange={handlePhotoUpload}/>
            </span>
            <span className="tvt-athlete-main">{athlete.name}</span>
            <span className="tvt-athlete-team-chip">{athlete.team}</span>
            <span className="tvt-period-chip" style={{ background: PERIOD_COLORS[athlete.period] }}>{athlete.period}</span>
            <span className="tvt-risk-chip" style={{ background: RISK_COLORS[athlete.risk] }}>{athlete.risk}</span>
            <span className="tvt-status-chip" style={{ background: STATUS_COLORS[athlete.status] }}>{athlete.status}</span>
          </div>
          <div className="tvt-metrics-row">
            <div><b>Age:</b> <span style={{ color: "#FFD700" }}>{athlete.age}</span></div>
            <div><b>Period:</b> <span style={{ color: PERIOD_COLORS[athlete.period] }}>{athlete.period}</span></div>
            <div><b>Start:</b> <span style={{ color: "#1de682" }}>{athlete.start}</span></div>
            <div><b>End:</b> <span style={{ color: "#1de682" }}>{athlete.end}</span></div>
            <div><b>Risk:</b> <span style={{ color: RISK_COLORS[athlete.risk] }}>{athlete.risk}</span></div>
          </div>
          <div className="tvt-risk-gauge">
            <div className="tvt-risk-gauge-label">
              <FaBalanceScale style={{ marginRight: 7 }} /> Vulnerability Gauge
            </div>
            <div className="tvt-risk-gauge-outer">
              <div className="tvt-risk-gauge-inner"
                style={{
                  width: `${calcVulnerability(athlete.riskFactors)}%`,
                  background: calcVulnerability(athlete.riskFactors) >= 60 ? "#FF4444" : (calcVulnerability(athlete.riskFactors) >= 40 ? "#FFD700" : "#1de682")
                }}>
                {calcVulnerability(athlete.riskFactors)}/100
              </div>
            </div>
          </div>
          <div className="tvt-progress-bar">
            <div className="tvt-progress-bar-label">
              <FaChartLine style={{ marginRight: 7 }} /> Progress to Resolution
            </div>
            <div className="tvt-progress-bar-outer">
              <div className="tvt-progress-bar-inner" style={{
                width: progress + "%",
                background: progress === 100 ? "#1de682" : "#FFD700"
              }} />
            </div>
          </div>
          <div className="tvt-riskfactor-section">
            <div className="tvt-riskfactor-title">Custom Risk Factors (weighted)</div>
            <table className="tvt-riskfactor-table">
              <thead>
                <tr>
                  <th>Label</th><th>Value (0–10)</th><th>Weight</th><th></th>
                </tr>
              </thead>
              <tbody>
                {athlete.riskFactors.map((f, idx) => (
                  <tr key={idx}>
                    <td>
                      <input value={f.label} onChange={e => updateFactor(idx, "label", e.target.value)} className="tvt-riskfactor-label"/>
                    </td>
                    <td>
                      <input type="number" min="0" max="10" value={f.value} onChange={e => updateFactor(idx, "value", e.target.value)} className="tvt-riskfactor-value"/>
                    </td>
                    <td>
                      <input type="number" min="1" max="5" value={f.weight} onChange={e => updateFactor(idx, "weight", e.target.value)} className="tvt-riskfactor-weight"/>
                    </td>
                    <td>
                      <button className="tvt-riskfactor-remove" onClick={() => removeFactor(idx)}>&times;</button>
                    </td>
                  </tr>
                ))}
                <tr>
                  <td><input value={newFactor.label} onChange={e => setNewFactor(f => ({ ...f, label: e.target.value }))} placeholder="Add..." className="tvt-riskfactor-label"/></td>
                  <td><input type="number" min="0" max="10" value={newFactor.value} onChange={e => setNewFactor(f => ({ ...f, value: e.target.value }))} className="tvt-riskfactor-value"/></td>
                  <td><input type="number" min="1" max="5" value={newFactor.weight} onChange={e => setNewFactor(f => ({ ...f, weight: e.target.value }))} className="tvt-riskfactor-weight"/></td>
                  <td><button className="tvt-riskfactor-add" onClick={addRiskFactor}>Add</button></td>
                </tr>
              </tbody>
            </table>
          </div>
          <div className="tvt-actionplan-section">
            <div className="tvt-actionplan-title">Board Action Plan</div>
            {editingActionPlan !== null ? (
              <div>
                <textarea className="tvt-actionplan-edit"
                  value={editingActionPlan}
                  onChange={e => setEditingActionPlan(e.target.value)}
                  rows={2}
                />
                <button className="tvt-actionplan-save" onClick={saveActionPlan}>Save</button>
              </div>
            ) : (
              <div>
                <span className="tvt-actionplan">{athlete.actionPlan}</span>
                <button className="tvt-actionplan-editbtn" onClick={editActionPlan}><FaPen /></button>
              </div>
            )}
          </div>
          <div className="tvt-boardnotes-section">
            <div className="tvt-boardnotes-title">Boardroom Notes & Decisions</div>
            <ul className="tvt-boardnotes-list">
              {athlete.boardNotes.map((n, i) =>
                <li key={i} className="tvt-boardnote-entry">
                  <span className="tvt-boardnote-date">{n.date}</span>
                  <span className="tvt-boardnote-note">{n.note}</span>
                  {!n.signed && <button className="tvt-boardnote-sign" onClick={() => signNote(i)}><FaCheckCircle /> Sign</button>}
                  {n.signed && <span className="tvt-signed-chip"><FaCheckCircle style={{ color: "#1de682" }} /> Signed</span>}
                </li>
              )}
            </ul>
            <div className="tvt-boardnotes-new">
              <input value={boardNote} onChange={e => setBoardNote(e.target.value)} placeholder="Add boardroom note..." className="tvt-boardnotes-input" />
              <button onClick={addBoardNote} className="tvt-boardnotes-add">Add</button>
            </div>
          </div>
          <div className="tvt-timeline-section">
            <div className="tvt-timeline-title">
              <FaClipboardList style={{ marginRight: 6 }} /> Risk Timeline & Board Actions
            </div>
            <ul className="tvt-timeline-list">
              {athlete.history.length === 0 && <li>No actions yet.</li>}
              {athlete.history.map((h, i) =>
                <li key={i} className="tvt-timeline-event">
                  <span className="tvt-timeline-date">{h.date}</span>
                  <span className="tvt-timeline-actor">{ACTOR_ICONS[h.actor] || <FaUser />} {h.actor}</span>
                  <span className="tvt-timeline-note">{h.note}</span>
                  {!h.signed && (
                    <button className="tvt-timeline-sign" onClick={() => signOffAction(i)}>
                      <FaCheckCircle /> Sign-off
                    </button>
                  )}
                  {h.signed && <span className="tvt-signed-chip"><FaCheckCircle style={{ color: "#1de682" }} /> Signed</span>}
                </li>
              )}
            </ul>
          </div>
          {athlete.status !== "Resolved" && (
            <div className="tvt-action-section">
              <div className="tvt-action-title"><FaRegCalendarCheck style={{ marginRight: 6 }} />Assign Board/Coach Action</div>
              <div className="tvt-action-fields">
                <input
                  className="tvt-action-date"
                  type="date"
                  value={action.date}
                  onChange={e => setAction(a => ({ ...a, date: e.target.value }))}
                />
                <select className="tvt-action-actor"
                  value={action.actor}
                  onChange={e => setAction(a => ({ ...a, actor: e.target.value }))}
                >
                  <option>Board</option>
                  <option>Coach</option>
                  <option>S&C Coach</option>
                </select>
                <input
                  className="tvt-action-note"
                  placeholder="Note/action/observation"
                  value={action.note}
                  onChange={e => setAction(a => ({ ...a, note: e.target.value }))}
                />
                <button className="tvt-action-btn" onClick={assignAction}>Add</button>
                <button className="tvt-resolve-btn" onClick={resolvePeriod}><FaCheckCircle /> Resolve</button>
              </div>
            </div>
          )}
          <div className="tvt-ai-section">
            <button className="tvt-ai-btn" onClick={runAI}>
              <FaRegLightbulb style={{ marginRight: 6 }} />AI: Recommendations
            </button>
            {aiAdvice && (
              <div className="tvt-ai-output"><pre>{aiAdvice}</pre></div>
            )}
          </div>
          <div className="tvt-footer">
            <b>Prepared for:</b> <span style={{ color: "#FFD700" }}>Zagreb Youth Basketball Club</span>
            <span style={{ marginLeft: 14, color: "#FFD700" }}>{new Date().toLocaleDateString()}</span>
            <span className="tvt-watermark">Prepared by CourtEvo Vero – Elite Basketball Consulting</span>
          </div>
          {exportLog.length > 0 && (
            <div className="tvt-export-log">
              <b>Audit/Export Log:</b>
              <ul>
                {exportLog.map((e, i) =>
                  <li key={i}>{e.date}: {e.count} athletes exported ({e.type})</li>
                )}
              </ul>
            </div>
          )}
          {audit.length > 0 && (
            <div className="tvt-audit-log">
              <b>Boardroom Audit Trail:</b>
              <ul>
                {audit.slice(0, 6).map((a, i) =>
                  <li key={i}>{a.date}: {a.action}</li>
                )}
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
